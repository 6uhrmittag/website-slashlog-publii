{
    "version": "https://jsonfeed.org/version/1",
    "title": "slashlog",
    "description": "",
    "home_page_url": "https://slashlog.org",
    "feed_url": "https://slashlog.org/feed.json",
    "user_comment": "",
    "icon": "https://slashlog.org/media/website/dojo-1.png",
    "author": {
        "name": "marvin"
    },
    "items": [
        {
            "id": "https://slashlog.org/taskbutler-milestone-1/",
            "url": "https://slashlog.org/taskbutler-milestone-1/",
            "title": "Taskbutler - milestone #1",
            "summary": "<p>A retrospective of <a href=\"https://github.com/6uhrmittag/taskbutler/milestone/1?closed=1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">milestone #1: Dropbox Feature - First release</a></p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#rebranding\">issue #14: Rebranding</a></li>\n<li><a href=\"#create-dropbox-paper-and-link-to-task\">issue #20: Create dropbox paper and link to task</a></li>\n<li><a href=\"#upload-template-to-dropbox-and-link-task-to-office365\">issue #19: Upload template to Dropbox and link task to Office365</a></li>\n<li><a href=\"#test-in-production\">issue #27: Test in production</a></li>\n<li><a href=\"#log-rotation\">issue #25: Log rotation</a></li>\n</ul>\n</div>\n",
            "content_html": "<p>A retrospective of <a href=\"https://github.com/6uhrmittag/taskbutler/milestone/1?closed=1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">milestone #1: Dropbox Feature - First release</a></p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#rebranding\">issue #14: Rebranding</a></li>\n<li><a href=\"#create-dropbox-paper-and-link-to-task\">issue #20: Create dropbox paper and link to task</a></li>\n<li><a href=\"#upload-template-to-dropbox-and-link-task-to-office365\">issue #19: Upload template to Dropbox and link task to Office365</a></li>\n<li><a href=\"#test-in-production\">issue #27: Test in production</a></li>\n<li><a href=\"#log-rotation\">issue #25: Log rotation</a></li>\n</ul>\n</div>\n\n<h2 id=\"rebranding\">issue #14: <a href=\"https://github.com/6uhrmittag/taskbutler/issues/14\" target=\"_blank\" rel=\"noopener noreferrer\">Rebranding</a></h2>\n<p>As discussed in <a href=\"#INTERNAL_LINK#/post/2\">naming your tool</a>, naming a tool is a great way to ensure it's quality.<br>The initial reason was purely practical: 3rd party APIs and <a href=\"https://pypi.org\" target=\"_blank\" rel=\"noopener noreferrer\">pypi </a>require a name. But,</p>\n<p class=\"msg msg--success\">finding a pretty name increased my motivation for future features a lot.</p>\n<p>I'm still super proud of the choice.</p>\n<h2 id=\"create-dropbox-paper-and-link-to-task\">issue #20: <a href=\"https://github.com/6uhrmittag/taskbutler/issues/20\" target=\"_blank\" rel=\"noopener noreferrer\">Create dropbox paper and link to task</a></h2>\n<p>After successfully releasing the progress bar-feature, I dug a bit deeper into the universe of 3rd party APIs. Taskbutler now was more than just one script to solve a specific problem.</p>\n<p id=\"mcetoc_1d5kci4ik1\"><strong>Finding <a href=\"https://www.dropbox.com/en/paper\" target=\"_blank\" rel=\"noopener noreferrer\">Dropbox Paper,</a> pure luck</strong></p>\n<p>After using and disliking <a href=\"https://quip.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Quip</a>, I had high hopes for Dropbox Paper. I actually used it do brainstorm the Dropbox Paper functionality, since it always bugged my how limited the Todoist comment-functionality is.</p>\n<p>A few years ago I tried <a href=\"https://confluence.atlassian.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Atlassian's Confluence</a> + Jira for personal task tracking and knowledge management. It turned out pretty well, but it's just a tiny bit too expensive and produces a lot of overhead. It's also lacking a usable todo mobile app. Anyway...</p>\n<p id=\"mcetoc_1d5kcpaae2\"><strong>The key to success: Easy to use SDKs</strong></p>\n<p>Dropbox Paper turned out to be a great tool to enhance normal tasks. After finding the official <a href=\"https://github.com/dropbox/dropbox-sdk-python\" target=\"_blank\" rel=\"noopener noreferrer\">Python SDK for Dropbox API v2</a>, it was pretty easy to implement the basic functionality of creating and linking papers. Unfortunately the paper-API is still in development and I had to work around some limitations such as searching for papers.</p>\n<figure class=\"post__image post__image--center\" ><img src=\"https://slashlog.org/media/posts/6//feature-paper.gif\" alt=\"\" width=\"725\" height=\"233\">\n<figcaption >in-app demo</figcaption>\n</figure>\n<p>The flow is pretty straightforward:</p>\n<ol>\n<li>The user creates a folder and an initial paper</li>\n<li>Taskbutler searches for a task with a specific label name</li>\n<li>checks if the task-title already contains an URL</li>\n<li>If no URL is found:\n<ol>\n<li>it creates a new Dropbox Paper with the task-title as content</li>\n<li>adds the URL to the Todoist task-title using Todoist's formatting syntax</li>\n</ol>\n</li>\n</ol>\n<p class=\"msg msg--highlight \">The main issue is keeping the link between task and paper alive.</p>\n<p>Since no additional metadata can be stored within the task, Taskbutler relies on the URL in the task-title to be right.</p>\n<p>Additionally, I stumbled on two weird issues:</p>\n<ul>\n<li>the API can't find an empty folder - the user has to place an initial paper inside the folder</li>\n<li>the default permissions are set to public, which requires Taskbutler to always modify the permissions on new papers</li>\n</ul>\n<h2 id=\"upload-template-to-dropbox-and-link-task-to-office365\">issue #19: <a href=\"https://github.com/6uhrmittag/taskbutler/issues/19\" target=\"_blank\" rel=\"noopener noreferrer\">Upload template to Dropbox and link task to Office365</a></h2>\n<p class=\"msg msg--success\">This feature is pretty wild!</p>\n<p>It makes use of the Microsoft Office 365 integration in Dropbox.<br>Once Office 365 is connected to Dropbox, it is possible to open Office documents directly from the web-view of Dropbox. The file will then open right inside office.com(a web version of Word, Excel, Powerpoint).</p>\n<figure class=\"post__image post__image--center\" ><img src=\"https://slashlog.org/media/posts/6//feature-office.gif\" alt=\"\" width=\"725\" height=\"233\">\n<figcaption >in-app demo</figcaption>\n</figure>\n<p>The implementation is wild but super simple. It makes use of the fact that Dropbox URLs to Office 365 are always following the same schema:</p>\n<pre>https://www.dropbox.com/ow/msft/edit/home/&lt;$FOLDER&gt;/&lt;$FILENAME&gt;</pre>\n<p>Once one is logged into Dropbox and clicks on a link like the above, the corresponding file will open the web version of Microsoft Office.<br><br>Since <a href=\"https://get.todoist.help/hc/en-us/articles/205195102-Text-Formatting-\" target=\"_blank\" rel=\"noopener noreferrer\">Todoist allows URLs in tasks to be clickable</a>, the integration is almost seamless. To make use of this feature, Taskbutler will also upload a specified file to Dropbox when the feature label is found.</p>\n<p>My main goal is to make it super easy to write a simple letter in case of e.g. cancelling a contract or similar things that require a default template. It saves a ton of time to select and edit a template once and using it with this feature.</p>\n<p>This feature opens up a whole world of similar workflows. Maybe adding e-mail templates or even integration of online postage services that sends the finished letter once it's marked as done.</p>\n<h2 id=\"test-in-production\">issue #27: <a href=\"https://github.com/6uhrmittag/taskbutler/issues/27\" target=\"_blank\" rel=\"noopener noreferrer\">Test in production</a></h2>\n<p>At this point in development, I noticed that the lack of tests is very problematic.<br>I already added a devmode that runs without making changes, but I still relied on real-life tests with my personal account and during my personal usage. The functionality was still very limited and so were the test cases, but I clearly noticed the issue of missing tests.</p>\n<p>Even today the test coverage is not very high. That's why Taskbutler still fails very early and hard in case of any malfunction.</p>\n<p class=\"msg msg--success\">Since Taskbutler modifies important user-data, it rather crashes completely than corrupts any Todoist data.</p>\n<h2 id=\"log-rotation\">issue #25: <a href=\"https://github.com/6uhrmittag/taskbutler/issues/25\" target=\"_blank\" rel=\"noopener noreferrer\">Log rotation</a></h2>\n<p>Unfortunately, this is one of those issues, that are easily avoidable with proper testing. After a few days of personal usage, I noticed logfiles a size 50-100MB. This was due to a debug-log that generated tons of data. Adding rotation solved the issue </p>",
            "author": {
                "name": "marvin"
            },
            "tags": [
            ],
            "date_published": "2019-03-10T19:52:30+01:00",
            "date_modified": "2019-03-10T19:56:25+01:00"
        },
        {
            "id": "https://slashlog.org/libman-java-library-management-app/",
            "url": "https://slashlog.org/libman-java-library-management-app/",
            "title": "LibMan - exploring Java",
            "summary": "<p>This documents the development of LibMan - a Java programming assignment.</p>\n<p>The goal is to create a library management tool with GUI written in Java.<br>Since this is my first and probably last Java application, I'll use this opportunity to focus on stuff I'm personally interested in:</p>\n<ul>\n<li>how to use a CI with Java</li>\n<li>how to test Java applications</li>\n<li>how to ship Java applications (to Windows)</li>\n<li>usage of design patterns",
            "content_html": "<p>This documents the development of LibMan - a Java programming assignment.</p>\n<p>The goal is to create a library management tool with GUI written in Java.<br>Since this is my first and probably last Java application, I'll use this opportunity to focus on stuff I'm personally interested in:</p>\n<ul>\n<li>how to use a CI with Java</li>\n<li>how to test Java applications</li>\n<li>how to ship Java applications (to Windows)</li>\n<li>usage of design patterns<hr></li>\n</ul>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1d5hvj3980\">First things first: a pretty name</a></li>\n<li><a href=\"#mcetoc_1d5i0f32u4\">Versioning - git, Github, Gitlab, Bitbucket?</a></li>\n<li><a href=\"#mcetoc_1d5i0252k1\">Tough decision: License</a></li>\n<li><a href=\"#mcetoc_1d5i199855\">IDE vs. VIM</a></li>\n<li><a href=\"#mcetoc_1d5i1oje97\">The wizard of new project - setting up a project</a></li>\n<li><a href=\"#mcetoc_1d5i3e8398\">Instant Motivation: adding tests</a>\n<ul>\n<li><a href=\"#mcetoc_1d5i3rffh9\">First refactoring</a></li>\n<li><a href=\"#mcetoc_1d5icomueb\">Adding a simple test</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1d5idbv1sc\">Adding Travis-CI - pom.xml - complexity here we come</a>\n<ul>\n<li><a href=\"#mcetoc_1d5k3l76le\">adding maven</a></li>\n<li><a href=\"#mcetoc_1d5k432grf\">.travis.yaml</a></li>\n<li><a href=\"#mcetoc_1d5k4b7jsg\">A personal motivator: Travis-CI</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<hr>\n<p>I won't focus on code quality; I'll reuse code I created during the last semester and use as much IDE features as possible.</p>\n<p>The assignment requires:</p>\n<ul>\n<li>diagrams</li>\n<li>test data</li>\n<li>GUI with JavaFX</li>\n</ul>\n<p class=\"msg msg--highlight \">Note: The code will contain German text.</p>\n<h2 id=\"mcetoc_1d5hvj3980\">First things first: a pretty name</h2>\n<p>As I already pointed out, I think a name is important.</p>\n<p class=\"msg msg--success align-center\">LibMan</p>\n<p>done.</p>\n<h2 id=\"mcetoc_1d5i0f32u4\">Versioning - git, Github, Gitlab, Bitbucket?</h2>\n<p>Even if we won't use all features of versioing, if it is code</p>\n<p class=\"msg msg--info\">there is no excuse to not use versioning.</p>\n<p>I'll use <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>.</p>\n<p class=\"msg msg--info\">I'm not a fan of <a href=\"https://gitlab.com\" target=\"_blank\" rel=\"noopener noreferrer\">Gitlab </a>- I just get distracted by all its features.</p>\n<p>Github solves one problem: Versioning. I'll connect external services as soon as I need them.</p>\n<p class=\"msg msg--info\">Simplicity is king, especially for beginners.</p>\n<p>I'll use a private repository for the time of the development. Github kindly provides private repositories for all users and a set of free tools for students: <a href=\"https://education.github.com/pack\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Student Developer Pack.</a><br>The pack enables students to use TravisCI with private repositories👏.</p>\n<h2 id=\"mcetoc_1d5i0252k1\">Tough decision: License</h2>\n<p>Github kindly reminds us that licensing can be important. This is a programming assignment - it's only purpose is to learn stuff and be helpful for others:</p>\n<p class=\"msg msg--info\">MIT makes sharing as simple as possible.</p>\n<h2 id=\"mcetoc_1d5i199855\">IDE vs. VIM</h2>\n<p>It would be cool to use VIM to write code. But, thanks to the <a href=\"https://education.github.com/pack\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Student Developer Pack</a> I'm able to use<a href=\"https://www.jetbrains.com/idea\" target=\"_blank\" rel=\"noopener noreferrer\"> IntelliJ IDEA Ultimate</a>. I never looked into Java IDEs - IntelliJ just works.</p>\n<h2 id=\"mcetoc_1d5i1oje97\">The magical wizard - setting up a project</h2>\n<p>Since I don't even know that half of the choices mean, I just the magical wizard to create a JavaFX app with Java 1.8 SDK.</p>\n<p class=\"msg msg--info\">Don't add anything to the initial project that you don't understand. Add complexity as needed.</p>\n<p>Run the initial project to make sure you start with a working project. We'll break it later, but it should run at least once.</p>\n<figure class=\"post__image post__image--center\" ><img src=\"https://slashlog.org/media/posts/4/LibMan_firstRun.png\" alt=\"First run.\" width=\"654\" height=\"411\">\n<figcaption >First run.</figcaption>\n</figure>\n<h2 id=\"mcetoc_1d5i3e8398\">Instant Motivation: adding tests</h2>\n<p>Writing tests can be annoying and take time, but tests not only ensure a working build, they also provide feedback and motivation. Since we know that the empty project worked, we'll add a test to ensure this state.</p>\n<h3 id=\"mcetoc_1d5i3rffh9\">First refactoring</h3>\n<p id=\"mcetoc_1d5icht6ra\">Luckily there is a testing framework for testing javaFx: <a href=\"https://github.com/TestFX/TestFX\" target=\"_blank\" rel=\"noopener noreferrer\">TestFX</a></p>\n<p>But, adding tests requires a few changes to our initial project structure:</p>\n<ol>\n<li>Create a \"testing\"-directory according to this Stackoverflow answer: <a href=\"https://stackoverflow.com/questions/41638654/java-project-folder-structure-in-intellij-idea\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Java project folder structure in IntelliJ IDEA\">https://stackoverflow.com/questions/41638654/java-project-folder-structure-in-intellij-idea</a>:\n<pre><code>/src/</code><br><code>/src/main/com/</code><br><code>/src/main/com/LibMan/</code><br><code>/tests/</code><br>/tests/com/<br><code>/tests/com/LibMan</code></pre>\n</li>\n<li>add junit by following the <a href=\"https://www.jetbrains.com/help/idea/configuring-testing-libraries.html\" target=\"_blank\" rel=\"noopener noreferrer\">jetbrains guide</a>\n<ol>\n<li>make sure to rember your choice! junit4 or junit5.</li>\n</ol>\n</li>\n<li>add TestFX with Maven:\n<figure class=\"post__image post__image--center\" ><img src=\"https://slashlog.org/media/posts/4/LibMan_addMavenDependency.png\" alt=\"adding a dependendy\" width=\"916\" height=\"346\">\n<figcaption >Pick the version that fits your junit version!</figcaption>\n</figure>\n</li>\n</ol>\n<h3 id=\"mcetoc_1d5icomueb\">Adding a simple test</h3>\n<p>The <a href=\"https://github.com/TestFX/TestFX\" target=\"_blank\" rel=\"noopener noreferrer\">TestFX Readme provides</a> a basic example:</p>\n<pre><span class=\"pl-c\">// or (lookup by css id):</span>\n<span class=\"pl-smi\">FxAssert</span><span class=\"pl-k\">.</span>verifyThat(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#myButton<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">LabeledMatchers</span><span class=\"pl-k\">.</span>hasText(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>click me!<span class=\"pl-pds\">\"</span></span>));</pre>\n<p>We'll add a button to our initial project to make sure the test succeeds.<br>We don't care about style or layout - just copy the example and add a simple button:</p>\n<figure class=\"post__image post__image--wide\" ><img src=\"https://slashlog.org/media/posts/4/LibMan_firstTest.png\" alt=\"Screenshot of working test\" width=\"1339\" height=\"822\">\n<figcaption >The full setup with a working test.</figcaption>\n</figure>\n<h2 id=\"mcetoc_1d5idbv1sc\">Adding Travis-CI - pom.xml - complexity here we come</h2>\nAfter adding a few classes and more junit tests I really wanted to add <a href=\"https://travis-ci.org\" target=\"_blank\" rel=\"noopener noreferrer\">Travis-CI</a> to ensure a constant working state and get instant feedback on how the code is doing.\n<p>Travis builds the project and runs the tests. In order to to that, it needs to download all dependencies.</p>\n<p class=\"msg msg--info\">Maven writes its configuration in a pom.xml. It also priovides a default project structure.</p>\n<p>Thanks to <a href=\"https://stackoverflow.com/questions/12508180/how-do-you-mavenize-a-project-using-intellij/12508597#12508597\" target=\"_blank\" rel=\"noopener noreferrer\">Stackoverflow I also found a way to add Maven to an existing project</a> in Intellij. Intellij also asks to create a default project structure. After restructuring the project, moving all files in the new directories make sure that the project still runns.</p>\n<h3 id=\"mcetoc_1d5k3l76le\">adding maven</h3>\n<p>Thanks to the <a href=\"https://github.com/TestFX/TestFX\" target=\"_blank\" rel=\"noopener noreferrer\">TestFX Readme</a> we know how to add dependencies:</p>\n<pre>&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;org.testfx&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;testfx-junit5&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;4.0.15-alpha&lt;/<span class=\"pl-ent\">version</span>&gt;\n    &lt;<span class=\"pl-ent\">scope</span>&gt;test&lt;/<span class=\"pl-ent\">scope</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre>\n<p>After adding all dependencies, we add Travis</p>\n<h3 id=\"mcetoc_1d5k432grf\">.travis.yaml</h3>\n<p>Travis works with most programming languages and provides a good documentation. All configuration is done inside a <code>/.travis.yaml</code> file. A <a href=\"https://stackoverflow.com/questions/49116678/how-to-run-a-test-on-travis-which-uses-javafx-elements\" target=\"_blank\" rel=\"noopener noreferrer\">quick search also shows a basic example</a> on how to test JavaFX with Travis: </p>\n<pre class=\"lang-java prettyprint prettyprinted\"><code><span class=\"pln\">before_install</span><span class=\"pun\">:</span>\n  <span class=\"pun\">-</span> <span class=\"kwd\">if</span> <span class=\"pun\">[[</span> <span class=\"str\">\"${TRAVIS_OS_NAME}\"</span> <span class=\"pun\">==</span><span class=\"pln\"> linux </span><span class=\"pun\">]];</span><span class=\"pln\"> then export DISPLAY</span><span class=\"pun\">=:</span><span class=\"lit\">99.0</span><span class=\"pun\">;</span><span class=\"pln\"> sh </span><span class=\"pun\">-</span><span class=\"pln\">e </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">init</span><span class=\"pun\">.</span><span class=\"pln\">d</span><span class=\"pun\">/</span><span class=\"pln\">xvfb start</span><span class=\"pun\">;</span><span class=\"pln\"> fi\n\ninstall</span><span class=\"pun\">:</span> <span class=\"kwd\">true<br></span></code></pre>\n<p> adding this to <code>.travis.yaml</code> should to the trick.</p>\n<h3 id=\"mcetoc_1d5k4b7jsg\">A personal motivator: Travis-CI</h3>\n<p class=\"msg msg--highlight  msg--success\">The first run will take a while, it might need a few fixes... but it does feel amazing when your build is passing!</p>\n<p> <img class=\"post__image--center\" src=\"https://slashlog.org/media/posts/4/travis-status.png\" alt=\"Build history\" width=\"604\" height=\"418\"></p>\n<p>Check the console for any hints and errors. Make sure your tests are actually beeing executed!</p>\n<p><img class=\"post__image\" src=\"https://slashlog.org/media/posts/4/travis-tests.png\" alt=\"all executed tests succeeded.\" width=\"791\" height=\"486\"></p>",
            "author": {
                "name": "marvin"
            },
            "tags": [
            ],
            "date_published": "2019-03-09T20:32:23+01:00",
            "date_modified": "2019-03-10T17:16:39+01:00"
        },
        {
            "id": "https://slashlog.org/every-tool-deserves-a-name/",
            "url": "https://slashlog.org/every-tool-deserves-a-name/",
            "title": "every tool deserves a name",
            "summary": "<p>Maintaining a tool requires time and effort. By naming a tool it becomes a thing; a thing that can be loved.</p>\n<p class=\"msg msg--info\">By choosing a pretty name it becomes harder to abandon it.</p>\n<p>You don’t want your baby to crash and fail during tests.</p>\n",
            "content_html": "<p>Maintaining a tool requires time and effort. By naming a tool it becomes a thing; a thing that can be loved.</p>\n<p class=\"msg msg--info\">By choosing a pretty name it becomes harder to abandon it.</p>\n<p>You don’t want your baby to crash and fail during tests.</p>\n\n<p>Naming can also be a hard part. Suddenly it becomes real - it’s a choice that requires responsibility. Naming forces you also to think about the future of your tool.</p>\n<ul>\n<li>Does it need a domain for documentation?</li>\n<li>Could a Github organisation be useful?</li>\n<li>Docker, Twitter?!</li>\n<li>Will it be listed on distribution platforms or stores like pypi?</li>\n<li>Does it interact with 3rd party APIs?</li>\n</ul>\n<p>Tools like <a href=\"https://namechk.com/\" target=\"_blank\" rel=\"noopener noreferrer\">namechk </a>help to check availability on multiple platforms at once.</p>\n<p>Finding the name can take time and so, can distract you from further development, but it shouldn't. Using name generators, browsing domain registrar websites and simply asking friends can help to accelerate the process.</p>\n<p>Once a pretty name is found, wait a day, register accounts and just go with it.</p>\n<h2 id=\"mcetoc_1d5hbi7ps3\">bashblog - just a repo</h2>\n<p id=\"mcetoc_1d5hbi7ps4\">Finding a name for bashblog was pretty easy. It's written in bash, its a blog. There are similarly named projects, but since I've never had the intention to make a huge project out of it, it only needed <a href=\"https://github.com/6uhrmittag/bashblog\" target=\"_blank\" rel=\"noopener noreferrer\">a Github repo</a>.</p>\n<h2 id=\"mcetoc_1d5hbig675\">taskbutler - a potential product</h2>\n<p id=\"mcetoc_1d5hbig686\">Taskbutler started as a simple tool to customize Todoist. It required API access from the beginning. Soon it also required access Dropbox and GitHub.</p>\n<p class=\"msg msg--info\">When using APIs it's often required to register the app with its name.</p>\n<p>Fortunately, companies want you to use their APIs; they will guide you through the process and usually provide clear hints and requirements. The <a href=\"https://developer.todoist.com/sync/v7/#brand-usage\" target=\"_blank\" rel=\"noopener noreferrer\">Todoist API Documentation</a> clearly states:</p>\n<p class=\"msg msg--warning\">“Todoist” cannot be the first word in your application’s name. It can be used in the name of your app, though. For instance “x for Todoist” or “x with Todoist”, etc. This makes it clear that your application is created by you and not by Doist.</p>\n<p class=\"msg msg--warning\">You must clearly state that your application is \"not created by, affiliated with, or supported by Doist” in your application description.</p>\n<p>Quite obvious and understandable but important to remember.</p>\n<h2 id=\"mcetoc_1d5hbki4c7\">dream big</h2>\n<p id=\"mcetoc_1d5hbki4c8\">taskbutler started as todoist-progress. One problem, solved with one script. Since I had to rename todoist-progress anyway, I thought about future features a lot. It became quite obvious that it could be my potential first web app. Since domains cost only a few coffees, I soon registered taskbutler.org. The main reason I choose .org as TLD since .org not tied to a language or country.</p>\n<p>It took a few days to rename todoist-progress to taskbutler. Check your <a href=\"https://www.jetbrains.com/help/pycharm/rename-refactorings.html\" target=\"_blank\" rel=\"noopener noreferrer\">IDE for refactoring/renaming features</a> - it helps a lot.</p>",
            "author": {
                "name": "marvin"
            },
            "tags": [
            ],
            "date_published": "2019-03-09T15:00:31+01:00",
            "date_modified": "2019-03-10T17:24:22+01:00"
        },
        {
            "id": "https://slashlog.org/bashblog/",
            "url": "https://slashlog.org/bashblog/",
            "title": "bashblog",
            "summary": "<p>bashblog is a static blog generator, link list and knowledge base.<br>It solves a simple problem: How to preserve the thought or a summary of an article or video.</p>\n",
            "content_html": "<p>bashblog is a static blog generator, link list and knowledge base.<br>It solves a simple problem: How to preserve the thought or a summary of an article or video.</p>\n\n<figure class=\"post__image post__image--center\" ><img src=\"https://slashlog.org/media/posts/1/demo.png\" alt=\"bashblog screenshot\" width=\"1042\" height=\"653\">\n<figcaption >bashblog screenshot</figcaption>\n</figure>\n<p>bashblog receives links and videos via email and stores a text connected to it. This way an article and the gained knowledge keeps its value.</p>\n<div class=\"callout callout-primary\">\n<div>\n<p class=\"msg msg--info\"><em>Share via mail is available on every platform, in every app and tool.</em></p>\n<p><em>E-mail is lightweight and works everywhere, even in the subway.</em></p>\n<p class=\"msg msg--highlight  msg--info\">By storing whole sentences it becomes searchable and even indexable by Google.</p>\n<p>bashblog started as a simple script, but by <a href=\"https://github.com/6uhrmittag/bashblog\" target=\"_blank\" rel=\"noopener noreferrer\">publishing it to GitHub</a>, it thought me much more than scripting.</p>\n</div>\n</div>",
            "author": {
                "name": "marvin"
            },
            "tags": [
            ],
            "date_published": "2019-03-08T21:22:57+01:00",
            "date_modified": "2019-03-09T15:01:40+01:00"
        }
    ]
}
